"""
NurOS Media Player - Main Application
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
DeltaDesign Concept Night Media Player

Created: 2024-12-22 09:50:14 UTC
Author: AnmiTaliDev
License: GPL 3.0
"""

import sys
from pathlib import Path
from PyQt6.QtWidgets import (
    QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
    QPushButton, QLabel, QSlider, QListWidget
)
from PyQt6.QtCore import Qt
from PyQt6.QtMultimedia import QMediaPlayer, QAudioOutput


class DeltaNightTheme:
    """DeltaDesign Concept Night —Ü–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞"""
    PRIMARY_DARK = "#121212"
    SECONDARY_DARK = "#1E1E1E"
    NIGHT_BLUE = "#2D5B9E"
    NIGHT_PURPLE = "#6B4BA3"
    NIGHT_TEAL = "#1C746C"
    SURFACE_LIGHT = "#3A3A3A"
    SURFACE_MID = "#2C2C2C"
    SURFACE_DARK = "#1A1A1A"
    TEXT_PRIMARY = "#FFFFFF"
    TEXT_SECONDARY = "#B3B3B3"


class MediaPlayer(QMainWindow):
    def __init__(self):
        super().__init__()
        self.theme = DeltaNightTheme()
        self.initUI()
        self.initPlayer()
        self.setupConnections()

    def initUI(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        self.setWindowTitle("NurOS Media Player")
        self.setMinimumSize(800, 600)
        self.setStyleSheet(f"""
            QMainWindow {{
                background-color: {self.theme.PRIMARY_DARK};
            }}
            QLabel {{
                color: {self.theme.TEXT_PRIMARY};
                font-size: 12px;
            }}
            QPushButton {{
                background-color: {self.theme.SECONDARY_DARK};
                color: {self.theme.TEXT_PRIMARY};
                border: none;
                border-radius: 14px;
                padding: 8px;
                min-width: 80px;
            }}
            QPushButton:hover {{
                background-color: {self.theme.SURFACE_MID};
            }}
            QPushButton:pressed {{
                background-color: {self.theme.SURFACE_DARK};
            }}
            QSlider::groove:horizontal {{
                border: none;
                height: 4px;
                background: {self.theme.SURFACE_DARK};
            }}
            QSlider::handle:horizontal {{
                background: {self.theme.NIGHT_TEAL};
                width: 16px;
                height: 16px;
                margin: -6px 0;
                border-radius: 8px;
            }}
            QListWidget {{
                background-color: {self.theme.SECONDARY_DARK};
                color: {self.theme.TEXT_PRIMARY};
                border: none;
                border-radius: 14px;
                padding: 5px;
            }}
            QListWidget::item:selected {{
                background-color: {self.theme.NIGHT_BLUE};
            }}
        """)

        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout(central_widget)

        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–µ–∫–µ
        self.track_info = QLabel("–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞")
        self.track_info.setAlignment(Qt.AlignmentFlag.AlignCenter)
        layout.addWidget(self.track_info)

        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        self.progress_slider = QSlider(Qt.Orientation.Horizontal)
        layout.addWidget(self.progress_slider)

        # –í—Ä–µ–º—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        time_layout = QHBoxLayout()
        self.time_current = QLabel("00:00")
        self.time_total = QLabel("00:00")
        time_layout.addWidget(self.time_current)
        time_layout.addStretch()
        time_layout.addWidget(self.time_total)
        layout.addLayout(time_layout)

        # –ö–æ–Ω—Ç—Ä–æ–ª—ã –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è
        controls = QHBoxLayout()
        self.prev_button = QPushButton("‚èÆ")
        self.play_button = QPushButton("‚ñ∂")
        self.next_button = QPushButton("‚è≠")
        self.stop_button = QPushButton("‚èπ")
        for button in (self.prev_button, self.play_button, self.next_button, self.stop_button):
            button.setFixedSize(40, 40)
            controls.addWidget(button)

        # –†–µ–≥—É–ª—è—Ç–æ—Ä –≥—Ä–æ–º–∫–æ—Å—Ç–∏
        self.volume_slider = QSlider(Qt.Orientation.Horizontal)
        self.volume_slider.setMaximum(100)
        self.volume_slider.setValue(70)
        self.volume_slider.setFixedWidth(100)
        controls.addStretch()
        controls.addWidget(QLabel("üîä"))
        controls.addWidget(self.volume_slider)
        layout.addLayout(controls)

        # –ü–ª–µ–π–ª–∏—Å—Ç
        self.playlist = QListWidget()
        layout.addWidget(self.playlist)

    def initPlayer(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–¥–∏–∞–ø–ª–µ–µ—Ä–∞"""
        self.player = QMediaPlayer()
        self.audio_output = QAudioOutput()
        self.player.setAudioOutput(self.audio_output)
        self.audio_output.setVolume(0.7)
        self.current_file = None
        self.is_playing = False

    def setupConnections(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–≤—è–∑–µ–π –º–µ–∂–¥—É –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏"""
        self.play_button.clicked.connect(self.togglePlayback)
        self.stop_button.clicked.connect(self.stopPlayback)
        self.prev_button.clicked.connect(self.previousTrack)
        self.next_button.clicked.connect(self.nextTrack)
        self.volume_slider.valueChanged.connect(lambda x: self.audio_output.setVolume(x / 100))
        self.progress_slider.sliderMoved.connect(lambda x: self.player.setPosition(x))
        self.player.positionChanged.connect(self.updatePosition)
        self.player.durationChanged.connect(self.updateDuration)
        self.playlist.itemDoubleClicked.connect(self.playSelected)

    def togglePlayback(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        if self.is_playing:
            self.player.pause()
            self.play_button.setText("‚ñ∂")
        else:
            self.player.play()
            self.play_button.setText("‚è∏")
        self.is_playing = not self.is_playing

    def stopPlayback(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        self.player.stop()
        self.play_button.setText("‚ñ∂")
        self.is_playing = False

    def previousTrack(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —Ç—Ä–µ–∫—É –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ"""
        current_row = self.playlist.currentRow()
        if current_row > 0:
            self.playlist.setCurrentRow(current_row - 1)
            self.playSelected()

    def nextTrack(self):
        """–ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ç—Ä–µ–∫—É –≤ –ø–ª–µ–π–ª–∏—Å—Ç–µ"""
        current_row = self.playlist.currentRow()
        if current_row < self.playlist.count() - 1:
            self.playlist.setCurrentRow(current_row + 1)
            self.playSelected()

    def playSelected(self):
        """–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç—Ä–µ–∫–∞"""
        current_item = self.playlist.currentItem()
        if current_item:
            self.current_file = current_item.text()
            self.track_info.setText(f"–í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ: {self.current_file}")
            self.player.setSource(QUrl.fromLocalFile(self.current_file))
            self.togglePlayback()

    def updatePosition(self, position):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è"""
        self.progress_slider.setValue(position)
        self.time_current.setText(self.formatTime(position))

    def updateDuration(self, duration):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ–±—â–µ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ç—Ä–µ–∫–∞"""
        self.progress_slider.setRange(0, duration)
        self.time_total.setText(self.formatTime(duration))

    @staticmethod
    def formatTime(ms):
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ MM:SS"""
        s = ms // 1000
        m = s // 60
        s = s % 60
        return f"{m:02d}:{s:02d}"

    def dragEnterEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
        if event.mimeData().hasUrls():
            event.acceptProposedAction()

    def dropEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—Ä–æ—Å–∫–∞ —Ñ–∞–π–ª–æ–≤"""
        urls = event.mimeData().urls()
        for url in urls:
            file_path = url.toLocalFile()
            if file_path.lower().endswith(('.mp3', '.wav', '.ogg', '.flac')):
                self.playlist.addItem(Path(file_path).name)


def main():
    app = QApplication(sys.argv)
    player = MediaPlayer()
    player.show()
    sys.exit(app.exec())


if __name__ == "__main__":
    main()
